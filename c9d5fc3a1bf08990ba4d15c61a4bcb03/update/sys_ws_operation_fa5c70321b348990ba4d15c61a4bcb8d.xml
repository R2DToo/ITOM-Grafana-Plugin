<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>5e3aadfe87625510406540c6cebb3582</enforce_acl>
        <http_method>POST</http_method>
        <name>V1-Query-Alerts</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	var ciId="";
	var sysparam_query="";
	var alertType="none";
	var alertState ="All";
	var limit = 9999;
	var page = 0;
	var sortBy = "";
	var sortDirection = "ASC";
	var tagFilters = "";
	if (request.body.data.targets[0].target)
		ciId = request.body.data.targets[0].target;
	if (request.body.data.targets[0].sysparm_query)
		sysparam_query = request.body.data.targets[0].sysparm_query;
	if (request.body.data.targets[0].alertType)
		alertType = request.body.data.targets[0].alertType;
	if (request.body.data.targets[0].alertState == "Active")
		alertState = request.body.data.targets[0].alertState;
	if (request.body.data.targets[0].limit) {
		if (request.body.data.targets[0].limit <= 10000 && request.body.data.targets[0].limit > 0)
			limit = request.body.data.targets[0].limit;
	}
	if (request.body.data.targets[0].page) {
		if (request.body.data.targets[0].page >= 0)
			page = request.body.data.targets[0].page;
	}
	if (request.body.data.targets[0].sortBy)
		sortBy = request.body.data.targets[0].sortBy;
	if (request.body.data.targets[0].sortDirection)
		sortDirection = request.body.data.targets[0].sortDirection;
	if (request.body.data.targets[0].tagFilters)
		tagFilters = request.body.data.targets[0].tagFilters;
	//To do: add a condition if input not provided to return 500 error
	var queryParams = request.queryParams;
	var endTimeInput=queryParams.endTime;
	var startTimeInput=queryParams.startTime;
	var timerangeColumn="sys_updated_on";
	if (queryParams.timerangeColumn) {
		timerangeColumn = queryParams.timerangeColumn;
	}
	
	response.setContentType('application/json');
	var writer = response.getStreamWriter();
	
	var metricData = new x_opti8_itom_grafa.GrafanaAPIBackend();
	var isTableAllowed = metricData.isTableAllowed("em_alert");
	var doesTableExist = metricData.doesTableExist("em_alert");
	if (isTableAllowed.allowed == false) {
		response.setError(new sn_ws_err.BadRequestError(isTableAllowed.message));
	} else if (doesTableExist.tableExists == false) {
		response.setError(new sn_ws_err.BadRequestError("The table requested does not exist"));
	} else if (alertType == "") {
		response.setError(new sn_ws_err.BadRequestError("Alert type not provided"));
	} else if (alertState == "") {
		response.setError(new sn_ws_err.BadRequestError("Alert state not provided"));
	} else {
		response.setStatus(200);
		var metricValues=metricData.getAlerts(
			ciId, 
			alertType, 
			alertState, 
			sysparam_query, 
			limit, 
			page, 
			sortBy,
			sortDirection,
			startTimeInput, 
			endTimeInput,
			timerangeColumn,
			tagFilters
		);
		if (typeof metricValues == "string") {
			response.setError(new sn_ws_err.BadRequestError(metricValues));
		} else {
			response.setBody(metricValues);
		}
	}
})(request, response);]]></operation_script>
        <operation_uri>/api/x_opti8_itom_grafa/grafana_api/v1/query/alerts</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/v1/query/alerts</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>bstill-routley</sys_created_by>
        <sys_created_on>2022-01-05 19:57:35</sys_created_on>
        <sys_id>fa5c70321b348990ba4d15c61a4bcb8d</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>V1-Query-Alerts</sys_name>
        <sys_package display_value="ITOM Grafana Plugin" source="x_opti8_itom_grafa">c9d5fc3a1bf08990ba4d15c61a4bcb03</sys_package>
        <sys_policy/>
        <sys_scope display_value="ITOM Grafana Plugin">c9d5fc3a1bf08990ba4d15c61a4bcb03</sys_scope>
        <sys_update_name>sys_ws_operation_fa5c70321b348990ba4d15c61a4bcb8d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-24 18:22:45</sys_updated_on>
        <web_service_definition display_value="Grafana API">e579f07e1bf08990ba4d15c61a4bcb4f</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
