<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_opti8_itom_grafa.GrafanaAPIBackend</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GrafanaAPIBackend</name>
        <script><![CDATA[var GrafanaAPIBackend = Class.create();
GrafanaAPIBackend.prototype = {
    initialize: function() {
		this.hard_excluded_classes = [
			"dscy_route_next_hop",
			"cmdb_ci_memory_module",
			"cmdb_ci_disk",
			"cmdb_ci_disk_partition",
			"cmdb_ci_config_file_tracked",
			"cmdb_ci_ip_address",
			"dscy_router_interface",
			"cmdb_ci_network_adapter",
			"dscy_route_interface",
			"dscy_switchport",
			"dscy_swtch_partition",
			"cmdb_ci_file_system",
			"cmdb_ci_lvm_pool",
			"cmdb_ci_storage_device",
			"cmdb_ci_nas_file_system",
			"cmdb_ci_os_packages",
			"sys_package",
			"cmdb_ci_storage_pool",
			"cmdb_ci_patches",
			"cmdb_ci_endpoint_manual"
		];
    },
	doesTableExist: function (table) {
		return {tableExists: gs.tableExists(table)};
	},
	isTableAllowed: function (table) {
		var tableAllowed = {
			allowed: false, 
			message: "The " + table + " table you requested is not on the Allowed Tables List. Please ask your ServiceNow administrator to add an entry for the " + table + " table into the Allowed Tables List (x_opti8_itom_grafa_allowed_tables)"
		};
		var gr = new GlideRecordSecure("x_opti8_itom_grafa_allowed_tables");
		gr.addQuery("table", table);
		gr.addQuery("active", true);
		gr.query();
		if (gr.hasNext()) {
			tableAllowed.allowed = true;
			tableAllowed.message = "";
		}
		return tableAllowed;
	},
	getNestedCISv2: function (starting_point_sys_id, search_parent_limit, search_child_limit, rel_types, excluded_classes, type) {
		var full_excluded_classes = this.hard_excluded_classes.concat(excluded_classes);
		var next_parents = [starting_point_sys_id];
		var next_children = [starting_point_sys_id];
		var already_checked_parents = [];
		var already_checked_children = [];
		var node_ids = [];
		var response = [];
		if (type != "ci") {
			response.push({id: "", name: "None"});
		}
		try {
			while (search_parent_limit > 0) {
				var parent_buffer = [];
				while (next_parents.length > 0) {
					var current_parent_search = next_parents.pop();
					var parentGR = new GlideRecordSecure("cmdb_rel_ci");
					parentGR.addQuery("child", current_parent_search);
					if (rel_types.length > 0) {
						parentGR.addQuery("type", "IN", rel_types.toString());
					}
					parentGR.addQuery("child.sys_class_name", "NOT IN", full_excluded_classes.toString());
					parentGR.addQuery("parent.sys_class_name", "NOT IN", full_excluded_classes.toString());
					parentGR.query();
					while (parentGR.next()) {
						var parent_id = parentGR.getValue("parent");
						var parent_class_value = parentGR.parent.sys_class_name.toString();
						if (parent_buffer.indexOf(parent_id) == -1 && already_checked_parents.indexOf(parent_id) == -1) {
							parent_buffer.push(parent_id);
							already_checked_parents.push(parent_id);
						}
						if (node_ids.indexOf(type == "ci" ? parent_id : parent_class_value) == -1) {
							node_ids.push(type == "ci" ? parent_id : parent_class_value);
							if (type == "ci") {
								response.push({id: parent_id, name: parentGR.getDisplayValue("parent")});
							} else {
								response.push({id: parent_class_value, name: parentGR.parent.sys_class_name.getDisplayValue()});
							}
						}
						var child_id = parentGR.getValue("child");
						var child_class_value = parentGR.child.sys_class_name.toString();
						if (node_ids.indexOf(type == "ci" ? child_id : child_class_value) == -1) {
							node_ids.push(type == "ci" ? child_id : child_class_value);
							if (type == "ci") {
								response.push({id: child_id, name: parentGR.getDisplayValue("child")});
							} else {
								response.push({id: child_class_value, name: parentGR.child.sys_class_name.getDisplayValue()});
							}
						}
					}
				}
				next_parents = parent_buffer;
				search_parent_limit -= 1;
			}
			
			while (search_child_limit > 0) {
				var child_buffer = [];
				while (next_children.length > 0) {
					var current_child_search = next_children.pop();
					var childGR = new GlideRecordSecure("cmdb_rel_ci");
					childGR.addQuery("parent", current_child_search);
					if (rel_types.length > 0) {
						childGR.addQuery("type", "IN", rel_types.toString());
					}
					childGR.addQuery("child.sys_class_name", "NOT IN", full_excluded_classes.toString());
					childGR.addQuery("parent.sys_class_name", "NOT IN", full_excluded_classes.toString());
					childGR.query();
					while (childGR.next()) {
						var parent_id = childGR.getValue("parent");
						var parent_class_value = childGR.parent.sys_class_name.toString();
						if (node_ids.indexOf(type == "ci" ? parent_id : parent_class_value) == -1) {
							node_ids.push(type == "ci" ? parent_id : parent_class_value);
							if (type == "ci") {
								response.push({id: parent_id, name: childGR.getDisplayValue("parent")});
							} else {
								response.push({id: parent_class_value, name: childGR.parent.sys_class_name.getDisplayValue()});
							}
						}
						var child_id = childGR.getValue("child");
						var child_class_value = childGR.child.sys_class_name.toString();
						if (child_buffer.indexOf(child_id) == -1 && already_checked_children.indexOf(child_id) == -1) {
							child_buffer.push(child_id);
							already_checked_children.push(child_id);
						}
						if (node_ids.indexOf(type == "ci" ? child_id : child_class_value) == -1) {
							node_ids.push(type == "ci" ? child_id : child_class_value);
							if (type == "ci") {
								response.push({id: child_id, name: childGR.getDisplayValue("child")});
							} else {
								response.push({id: child_class_value, name: childGR.child.sys_class_name.getDisplayValue()});
							}
						}
					}
				}
				next_children = child_buffer;
				search_child_limit -= 1;
			}
		} catch (e) {
			return [{error: e}];
		}
		return response;
	},
	queryNodeGraph: function(starting_point_sys_id, search_parent_limit, search_child_limit, rel_types, excluded_classes) {
		var full_excluded_classes = this.hard_excluded_classes.concat(excluded_classes);
		var next_parents = [starting_point_sys_id];
		var next_children = [starting_point_sys_id];
		var already_checked_parents = [];
		var already_checked_children = [];
		var node_ids = [];
		var response = {
			nodes: [],
			edges: [],
			error: ""
		};
		try {
			while (search_parent_limit > 0) {
				var parent_buffer = [];
				while (next_parents.length > 0) {
					var current_parent_search = next_parents.pop();
					var parentGR = new GlideRecordSecure("cmdb_rel_ci");
					parentGR.addQuery("child", current_parent_search);
					if (rel_types.length > 0) {
						parentGR.addQuery("type", "IN", rel_types.toString());
					}
					parentGR.addQuery("child.sys_class_name", "NOT IN", full_excluded_classes.toString());
					parentGR.addQuery("parent.sys_class_name", "NOT IN", full_excluded_classes.toString());
					parentGR.query();
					while (parentGR.next()) {
						var parent_id = parentGR.getValue("parent");
						if (parent_buffer.indexOf(parent_id) == -1 && already_checked_parents.indexOf(parent_id) == -1) {
							parent_buffer.push(parent_id);
							already_checked_parents.push(parent_id);
						}
						if (node_ids.indexOf(parent_id) == -1) {
							node_ids.push(parent_id);
							var parent_node = {
								id: parent_id,
								title: parentGR.getDisplayValue("parent"),
								subtitle: parentGR.parent.sys_class_name.getDisplayValue()
							};
							response.nodes.push(parent_node);
						}
						var child_id = parentGR.getValue("child");
						if (node_ids.indexOf(child_id) == -1) {
							node_ids.push(child_id);
							var child_node = {
								id: child_id,
								title: parentGR.getDisplayValue("child"),
								subtitle: parentGR.child.sys_class_name.getDisplayValue()
							};
							response.nodes.push(child_node);
						}
						var edge = {
							id: parent_id + "||" + child_id,
							source: parent_id,
							target: child_id,
							mainstat: parentGR.getDisplayValue("type")
						};
						response.edges.push(edge);
					}
				}
				next_parents = parent_buffer;
				search_parent_limit -= 1;
			}
			
			while (search_child_limit > 0) {
				var child_buffer = [];
				while (next_children.length > 0) {
					var current_child_search = next_children.pop();
					var childGR = new GlideRecordSecure("cmdb_rel_ci");
					childGR.addQuery("parent", current_child_search);
					if (rel_types.length > 0) {
						childGR.addQuery("type", "IN", rel_types.toString());
					}
					childGR.addQuery("child.sys_class_name", "NOT IN", full_excluded_classes.toString());
					childGR.addQuery("parent.sys_class_name", "NOT IN", full_excluded_classes.toString());
					childGR.query();
					while (childGR.next()) {
						var parent_id = childGR.getValue("parent");
						if (node_ids.indexOf(parent_id) == -1) {
							node_ids.push(parent_id);
							var parent_node = {
								id: parent_id,
								title: childGR.getDisplayValue("parent"),
								subtitle: childGR.parent.sys_class_name.getDisplayValue()
							};
							response.nodes.push(parent_node);
						}
						var child_id = childGR.getValue("child");
						if (child_buffer.indexOf(child_id) == -1 && already_checked_children.indexOf(child_id) == -1) {
							child_buffer.push(child_id);
							already_checked_children.push(child_id);
						}
						if (node_ids.indexOf(child_id) == -1) {
							node_ids.push(child_id);
							var child_node = {
								id: child_id,
								title: childGR.getDisplayValue("child"),
								subtitle: childGR.child.sys_class_name.getDisplayValue()
							};
							response.nodes.push(child_node);
						}
						var edge = {
							id: parent_id + "||" + child_id,
							source: parent_id,
							target: child_id,
							mainstat: childGR.getDisplayValue("type")
						};
						response.edges.push(edge);
					}
				}
				next_children = child_buffer;
				search_child_limit -= 1;
			}
			for (var x = 0; x < response.nodes.length; x++) {
				response.nodes[x].arc__impact_clear = 0;
				response.nodes[x].arc__impact_critical = 0;
				response.nodes[x].arc__impact_major = 0;
				response.nodes[x].arc__impact_minor = 0;
				response.nodes[x].arc__impact_warning = 0;
				response.nodes[x].arc__impact_ok = 0;
				response.nodes[x].detail__impact = "Clear";

				var em_alertTableAllowed = this.isTableAllowed("em_alert");
				var doesAlertTableExist = this.doesTableExist("em_alert");
				var count_alerts_response = [];
				if (doesAlertTableExist == true) {
					if (em_alertTableAllowed.allowed == false) {
						return em_alertTableAllowed.message;
					} else {
						count_alerts_response = this.getAggregate("em_alert", "state!=closed^cmdb_ci=" + response.nodes[x].id, "COUNT", "sys_id", "cmdb_ci", "1");
					}
				}
				
				var count = 0;
				if (count_alerts_response.length > 0) {
					count = count_alerts_response[0].COUNT;
				}
				response.nodes[x].mainstat = count.toString() + " Active Alerts";
				
				var em_impact_statusTableAllowed = this.isTableAllowed("em_impact_status");
				var doesImpactStatusTableExist = this.doesTableExist("em_impact_status");
				var impact = 5;
				if (doesImpactStatusTableExist == true) {
					if (em_impact_statusTableAllowed.allowed == false) {
						return em_impact_statusTableAllowed.message;
					} else {
						impact = this.getImpactStatusOfCI(response.nodes[x].id);
					}
				}
				switch (impact) {
					case 0:
						response.nodes[x].arc__impact_clear = 1;
						response.nodes[x].detail__impact = "Clear";
						break;
					case 1:
						response.nodes[x].arc__impact_critical = 1;
						response.nodes[x].detail__impact = "Critical";
						break;
					case 2:
						response.nodes[x].arc__impact_major = 1;
						response.nodes[x].detail__impact = "Major";
						break;
					case 3:
						response.nodes[x].arc__impact_minor = 1;
						response.nodes[x].detail__impact = "Minor";
						break;
					case 4:
						response.nodes[x].arc__impact_warning = 1;
						response.nodes[x].detail__impact = "Warning";
						break;
					case 5:
						response.nodes[x].arc__impact_ok = 1;
						response.nodes[x].detail__impact = "OK";
						break;
					default:
						response.nodes[x].arc__impact_clear = 1;
						response.nodes[x].detail__impact = "Clear";
						break;
				}
			}
		} catch (e) {
			response.error = e.message;
			return response;
		}
		return response;
	},
	getAlertAnomaly: function (columns, sysparam_query, sortBy, sortDirection, limit, page) {
		var anomalyValues = [];
		var fields = [];
		if (columns.indexOf("|") != -1) {
			fields = this.getValuesByNameMatch(columns, "|");
		} else {
			fields = this.getValuesByNameMatch(columns, ",");
		}
		if (columns.length == 0)
			fields = this.getTableColumns("em_alert_anomaly");
		
		var pageWindow = this.getPageWindow(limit, page);
		var anomalyGR = new GlideRecordSecure("em_alert_anomaly");
		anomalyGR.addEncodedQuery(sysparam_query);
		anomalyGR.setLimit(limit);
		anomalyGR.chooseWindow(pageWindow[0], pageWindow[1]);
		if (sortBy != "") {
			if (sortDirection == "ASC") {
				anomalyGR.orderBy(sortBy);
			} else {
				anomalyGR.orderByDesc(sortBy);
			}
		}
		anomalyGR.query();
		while (anomalyGR.next()) {
			var obj = {};
			fields.map(function(field) {
				obj[field] = anomalyGR.getDisplayValue(field);
			});
			var description = anomalyGR.getDisplayValue("description");
			obj["description.metricType"] = anomalyGR.getDisplayValue("type");
			obj["description.metricValue"] = description.substring(description.indexOf("metric value") + 13, description.indexOf(" is"));
			obj["description.boundary"] = description.substring(description.indexOf("boundary ") + 9, description.length);
			anomalyValues.push(obj);
		}
		return anomalyValues;
	},
	getAllTableColumns: function (table, search, typeFilter) {
		var tablesToCheck = [table];
		var extendedTableGr = new GlideRecordSecure("sys_db_object");
		extendedTableGr.addQuery("name", table);
		extendedTableGr.query();
		if (extendedTableGr.next()) {
			tablesToCheck.push(extendedTableGr.super_class.name.toString());
		}
		
		// doubleDepthSearch is an experimental feature. Currently it's not supported by Grafana's select component
		var doubleDepthSearch = false;
		var columnArray = [];
		var columnGr = new GlideRecordSecure("sys_dictionary");
		columnGr.addEncodedQuery("nameIN" + tablesToCheck.toString());
		columnGr.addEncodedQuery("element!=NULL");
		if (search != "") {
			columnGr.addEncodedQuery("column_labelLIKE" + search);
		}
		if (typeFilter != "") {
			columnGr.addQuery("internal_type", "IN", typeFilter + ",reference");
		}
		columnGr.query();
		while(columnGr.next()) {
			var column = {};
			column.label = columnGr.getDisplayValue("column_label");
			column.value = columnGr.getDisplayValue("element");
			column.type = columnGr.getDisplayValue("internal_type");
			if (column.type == "Reference") {
				//columnArray.push({ label: column.label, value: column.value, type: column.type });
				column.options = [{ label: column.label, value: column.value, type: column.type }];
				var referenceTable = columnGr.getValue("reference");
				var nestedColumnGr = new GlideRecordSecure("sys_dictionary");
				nestedColumnGr.addQuery("name", referenceTable);
				nestedColumnGr.addEncodedQuery("element!=NULL");
				if (typeFilter != "") {
					nestedColumnGr.addQuery("internal_type", "IN", typeFilter);
				}
				nestedColumnGr.query();
				while (nestedColumnGr.next()) {
					var nestedObj = {};
					nestedObj.label = column.label + " => " + nestedColumnGr.getDisplayValue("column_label");
					nestedObj.value = column.value + "." + nestedColumnGr.getDisplayValue("element");
					nestedObj.type = nestedColumnGr.getDisplayValue("internal_type");
					if (nestedObj.type == "Reference" && doubleDepthSearch == true) {
						nestedObj.options = [];
						var nestedReference = nestedColumnGr.getValue("reference");
						var doubleNestedGr = new GlideRecordSecure("sys_dictionary");
						doubleNestedGr.addQuery("name", nestedReference);
						doubleNestedGr.addEncodedQuery("element!=NULL");
						doubleNestedGr.query();
						while (doubleNestedGr.next()) {
							var doubleNestedObj = {};
							doubleNestedObj.label = nestedObj.label + " => " + doubleNestedGr.getDisplayValue("column_label");
							doubleNestedObj.value = nestedObj.value + "." + doubleNestedGr.getDisplayValue("element");
							nestedObj.options.push(doubleNestedObj);
						}
					}
					column.options.push(nestedObj);
				}
			}
			columnArray.push(column);
		}
		// Remove duplicates from the final array caused by parent classes that contain the same fields
		var finalArray = columnArray.filter(function(el, i, arr) {
			var firstOccurence = !arr.some(function(testEl, testI) {
				return testEl.value == el.value && testI < i;
			});
			return firstOccurence;
		});
		return finalArray;
	},
	getMetricNamesFromCIs: function (ciIdMatch,type) {
		var queryStr = "";
		var operatingSystems = "";
		var ciIds = this.getValuesByNameMatch(ciIdMatch, "|");
		if(ciIds.length<=0)
			return '[]';
		for(c=0;c<ciIds.length;c++)
			queryStr+=ciIds[c]+",";

		if(queryStr.charAt(queryStr.length - 1)==',')
			queryStr=queryStr.substring(0, queryStr.length - 1);

		var cmdbQueryStr="sys_idIN"+queryStr;
		var cmdbGr = new GlideRecordSecure("cmdb_ci");
		cmdbGr.addEncodedQuery(cmdbQueryStr);
		cmdbGr.query();
		while (cmdbGr.next())
			operatingSystems += cmdbGr.getValue("sys_class_name") + ",";

		queryStr="^cmdb_ciIN"+queryStr;
		//queryStr="^cmdb_ci.nameIN"+queryStr+"^resource_idISEMPTY";

		var returnMetrics = [];
		var metricNames = [];
		var metricToCiGr = new GlideRecordSecure('sa_metric_map');
		metricToCiGr.addEncodedQuery(queryStr);
		metricToCiGr.query();

		while (metricToCiGr.next()) {
			var metric_tiny_name = metricToCiGr.metric_type_id.metric_type_tiny_name.getDisplayValue();
			var metric_type_id = metricToCiGr.getValue("metric_type_id");
			var metricTypeId = metricToCiGr.getDisplayValue("metric_type_id");
			var metricTinyName = metricToCiGr.metric_type_id.metric_type_tiny_name.toString();
			if(metricNames.indexOf(metric_tiny_name) === -1 ) 
			{
				metricNames.push(metric_tiny_name);
				var metricObj = {};
				if(type=="GOLDEN")
				{
					var isTableAllowed = this.isTableAllowed("sa_metric_dashboard_metadata");
					if (isTableAllowed.allowed == false) {
						return isTableAllowed.message;
					}
					if(this.isGoldenMetric(metricTypeId)) {
						metricObj.name = metric_tiny_name;
						metricObj.id = metric_type_id;
						returnMetrics.push(metricObj);
					}
				}
				else if (type=="CUSTOM_KPIS")
				{
					if(this.isCustomKpi(metricTinyName, operatingSystems)) {
						metricObj.name = metric_tiny_name;
						metricObj.id = metric_type_id;
						returnMetrics.push(metricObj);
					}
				}
				else {
					metricObj.name = metric_tiny_name;
					metricObj.id = metric_type_id;
					returnMetrics.push(metricObj);
				}
			}
		}
		returnMetrics.sort();
		return returnMetrics;
	},
	getNestedCIS: function(ciId, parentDepth, childDepth, sysparam, type) {
		var excludedClasses = 'dscy_route_next_hop,cmdb_ci_memory_module,cmdb_ci_disk,cmdb_ci_disk_partition,cmdb_ci_config_file_tracked,	cmdb_ci_ip_address,dscy_router_interface,cmdb_ci_network_adapter,dscy_route_interface,cmdb_ci_file_system,cmdb_ci_lvm_pool,	cmdb_ci_storage_device,cmdb_ci_nas_file_system,cmdb_ci_os_packages,sys_package,cmdb_ci_storage_pool,cmdb_ci_patches,cmdb_ci_endpoint_manual';
		try {
			var returnValues = [];
			var returnValueIds = [];
			var idList = [];
			var originalIdList = [];
			if (ciId != "") {
				originalIdList.push(ciId);
				idList.push(ciId);
			}
			if (type == "class") returnValues.push({ name: "None", id: ""});
			var startGr = new GlideRecordSecure("cmdb_ci");
			startGr.addQuery("sys_id", idList[0]);
			startGr.query();
			if (startGr.next()) {
				var obj = {};
				obj.id = startGr.getValue("sys_id");
				obj.name = startGr.getDisplayValue("name");
				var id = obj.id;
				var className = startGr.getDisplayValue("sys_class_name");
				var classValue = startGr.getValue("sys_class_name");
				if (type == "class") {
					obj.id = classValue;
					obj.name = className;
				}
				returnValues.push(obj);
				returnValueIds.push(obj.id);
			}
			while (parentDepth > 0) {
				var nextIdList = [];
				while (idList.length > 0) {
					var currentId = idList.pop();
					var parentGR = new GlideRecordSecure("cmdb_rel_ci");
					parentGR.addQuery("child", currentId);
					if (sysparam != "")
						parentGR.addEncodedQuery(sysparam);
					parentGR.addQuery("child.sys_class_name", "NOT IN", excludedClasses);
					parentGR.addQuery("parent.sys_class_name", "NOT IN", excludedClasses);
					parentGR.query();
					while (parentGR.next()) {
						var parentObj = {};
						var childObj = {};
						parentObj.name = parentGR.parent.name.getDisplayValue();
						parentObj.id = parentGR.getValue("parent");
						childObj.name = parentGR.child.name.getDisplayValue();
						childObj.id = parentGR.getValue("child");

						var parent_id = parentObj.id;

						var parent_class = parentGR.parent.sys_class_name.getDisplayValue();
						var parent_class_value = parentGR.parent.sys_class_name.toString();
						var child_class = parentGR.child.sys_class_name.getDisplayValue();
						var child_class_value = parentGR.child.sys_class_name.toString();
						if (type == "class") {
							parentObj.name = parent_class;
							parentObj.id = parent_class_value;
							childObj.name = child_class;
							childObj.id = child_class_value;
						}
						if (returnValueIds.indexOf(parentObj.id) == -1) {
							returnValueIds.push(parentObj.id);
							returnValues.push(parentObj);
						}
						if (returnValueIds.indexOf(childObj.id) == -1) {
							returnValueIds.push(childObj.id);
							returnValues.push(childObj);
						}
						nextIdList.push(parent_id);
					}
				}
				idList = nextIdList;
				parentDepth -= 1;
			}

			if (parentDepth == 0 && originalIdList.length > 0) {
				idList = originalIdList;
			}

			while (childDepth > 0) {
				var nextIdList = [];
				while (idList.length > 0) {
					var currentId = idList.pop();
					var childGR = new GlideRecordSecure("cmdb_rel_ci");
					childGR.addQuery("parent", currentId);
					if (sysparam != "")
						childGR.addEncodedQuery(sysparam);
					childGR.addQuery("child.sys_class_name", "NOT IN", excludedClasses);
					childGR.addQuery("parent.sys_class_name", "NOT IN", excludedClasses);
					childGR.query();
					while (childGR.next()) {
						var parentObj = {};
						var childObj = {};
						parentObj.name = childGR.parent.name.getDisplayValue();
						parentObj.id = childGR.getValue("parent");
						childObj.name = childGR.child.name.getDisplayValue();
						childObj.id = childGR.getValue("child");
						
						var child_id = childObj.id;

						var parent_class = childGR.parent.sys_class_name.getDisplayValue();
						var parent_class_value = childGR.parent.sys_class_name.toString();
						var child_class = childGR.child.sys_class_name.getDisplayValue();
						var child_class_value = childGR.child.sys_class_name.toString();
						if (type == "class") {
							parentObj.name = parent_class;
							parentObj.id = parent_class_value;
							childObj.name = child_class;
							childObj.id = child_class_value;
						}
						if (returnValueIds.indexOf(parentObj.id) == -1) {
							returnValueIds.push(parentObj.id);
							returnValues.push(parentObj);
						}
						if (returnValueIds.indexOf(childObj.id) == -1) {
							returnValueIds.push(childObj.id);
							returnValues.push(childObj);
						}
						nextIdList.push(child_id);
					}
				}
				idList = nextIdList;
				childDepth -= 1;
			}
			return returnValues;
		} catch (e) {
			return e;
		}
	},
	getGroupByVariable: function (table, groupBy, sysparam) {
		var returnArray = [];
		// Possible options are:
		// s = standard: display value for name and value for id
		// d = display: display value for both name and id
		// v = value: for both name and id
		var options = "s";
		if (groupBy.includes(":d")) {
			groupBy = groupBy.substring(0, groupBy.length - 2);
			options = "d";
		} else if (groupBy.includes(":v")) {
			groupBy = groupBy.substring(0, groupBy.length - 2);
			options = "v";
		}
		var tableGA = new GlideAggregate(table);
		tableGA.addEncodedQuery(sysparam);
		tableGA.groupBy(groupBy);
		tableGA.query();
		while (tableGA.next()) {
			var obj = {};
			if (options == "d") {
				obj.name = tableGA.getDisplayValue(groupBy);
				obj.id = tableGA.getDisplayValue(groupBy);
			} else if (options == "v") {
				obj.name = tableGA.getValue(groupBy);
				obj.id = tableGA.getValue(groupBy);
			} else if (options == "s") {
				obj.name = tableGA.getDisplayValue(groupBy);
				obj.id = tableGA.getValue(groupBy);
			}
			returnArray.push(obj);
		}
		return returnArray;
	},
	getGenericVariable: function (table, nameColumn, idColumn, sysparam, limit) {
		var returnValues = [];
		var alreadyAdded = [];
		var glide = new GlideRecordSecure(table);
		glide.addEncodedQuery(sysparam);
		glide.setLimit(limit);
		glide.orderBy(nameColumn);
		glide.query();
		while(glide.next()) {
			var obj = {};
			var newNameColumn = "";
			var newIdColumn = "";
			if (nameColumn.includes(":d")) {
				newNameColumn = nameColumn.substring(0, nameColumn.length - 2);
				obj.name = glide.getDisplayValue(newNameColumn);
			} else if (nameColumn.includes(":v")) {
				newNameColumn = nameColumn.substring(0, nameColumn.length - 2);
				obj.name = glide.getValue(newNameColumn);
			} else {
				obj.name = glide.getDisplayValue(nameColumn);
			}
			
			if (idColumn.includes(":d")) {
				newIdColumn = idColumn.substring(0, idColumn.length - 2);
				obj.id = glide.getDisplayValue(newIdColumn);
			} else if (idColumn.includes(":v")) {
				newIdColumn = idColumn.substring(0, idColumn.length - 2);
				obj.id = glide.getValue(newIdColumn);
			} else {
				obj.id = glide.getValue(idColumn);
			}
			
			if (alreadyAdded.indexOf(obj.id) == -1) {
				alreadyAdded.push(obj.id);
				returnValues.push(obj);
			}
		}
		return returnValues;
	},
	getOutageStatus: function (ciIds, showPercent, sysparam, limit, page) {
		try {
			var outageStatus = [];
			var pageWindow = this.getPageWindow(limit, page);
			var serviceGr = new GlideRecordSecure("cmdb_ci_service_discovered");
			if (ciIds != "")
				serviceGr.addEncodedQuery("sys_idIN" + ciIds);
			if (sysparam != "")
				serviceGr.addEncodedQuery(sysparam);
			serviceGr.orderBy("name");
			serviceGr.setLimit(limit);
			serviceGr.chooseWindow(pageWindow[0], pageWindow[1]);
			serviceGr.query();
			while (serviceGr.next()) {
				var sys_id = serviceGr.getValue("sys_id");
				var name = serviceGr.getDisplayValue("name");
				outageStatus.push(this.getOutageByCI(sys_id, name, showPercent));
			}
			return outageStatus;
		} catch (e) {
			return e;
		}
	},
	getGenericTrend: function (table, sysparam, esSearch, trendColumn, trendBy, value, startTimeInput, endTimeInput, groupBy) {
		var result = [{}];
		var totalCount = 0;
		
		var startTime = new GlideDateTime();
		startTime.subtract(startTime.getNumericValue());// gets the date to 0
		startTime.add(startTimeInput);
		
		var endTime = new GlideDateTime();
		endTime.subtract(endTime.getNumericValue());
		endTime.add(endTimeInput);
		
		if (table != "") {
			//result[0].datapoints.push([0, this.convertSysCreatedStrToMS(startTime)]);
			var key = table;
			var trendAg = new GlideAggregate(table);
			if (groupBy != "") {
				trendAg.groupBy(groupBy);
			}
			trendAg.addTrend(trendColumn, trendBy, value);
			trendAg.addEncodedQuery(trendColumn + "BETWEEN" + startTime + "@" + endTime);
			trendAg.addEncodedQuery(sysparam);
			if (esSearch != "") trendAg.addEncodedQuery("123LUCENE_QUERY321=" + this.encodeBase16(esSearch));
			trendAg.addAggregate("COUNT");
			trendAg.setGroup(false);
			trendAg.query();
			while (trendAg.next()) {
				var count = parseInt(trendAg.getAggregate("COUNT"));
				var timeRef = this.convertSysCreatedStrToMS(trendAg.getValue("timeref"));
				totalCount += count;
				if (groupBy != "") {
					var groupByColumn = trendAg.getDisplayValue(groupBy);
					key = groupByColumn;
				}
				
				if (result[0][key]) {
					result[0][key].datapoints.push([count, timeRef]);
				} else {
					var entry = { datapoints: [[count, timeRef]] };
					result[0][key] = entry;
				}
			}
			var resultKeys = Object.keys(result[0]);
			if (resultKeys.length == 0) {
				result[0][key] = {datapoints: []};
				var intervalInSeconds = 60;
				var timeDifference = GlideDateTime.subtract(startTime, endTime);
				if (timeDifference.getDisplayValue().contains("Days")) {
					intervalInSeconds = 60 * 60;
				}
				while (startTime <= endTime) {
					result[0][key].datapoints.push([0, this.convertSysCreatedStrToMS(startTime)]);
					startTime.addSeconds(intervalInSeconds);
				}
			}
		}
		return result;
	},
	queryLogData: function (sysparam, limit, page, sortBy, sortDirection, startTimeInput, endTimeInput, esSearch, compressLog) {
		var returnArray = [];
		
		var startTime = new GlideDateTime();
		startTime.setNumericValue(startTimeInput);
		var endTime = new GlideDateTime();
		endTime.setNumericValue(endTimeInput);
		
		var pageWindow = this.getPageWindow(limit, page);
		var logGr = new GlideRecordSecure("sn_occ_log_viewer_parent");
		logGr.addEncodedQuery("timeBETWEEN" + startTime + "@" + endTime);
		logGr.addEncodedQuery(sysparam);
		if (esSearch != "") logGr.addEncodedQuery("123LUCENE_QUERY321=" + this.encodeBase16(esSearch));
		logGr.setLimit(limit);
		logGr.chooseWindow(pageWindow[0], pageWindow[1]);
		if (sortBy != "") {
			if (sortDirection == "ASC") {
				logGr.orderBy(sortBy);
			} else {
				logGr.orderByDesc(sortBy);
			}
		}
		logGr.query();
		while (logGr.next()) {
			var log = {};
			log.sys_created_on = this.convertSysCreatedStrToMS(logGr.getValue("time"));
			log.log_message = logGr.getDisplayValue("log_message");
			log.message = logGr.getDisplayValue("message");
			if (compressLog) {
				log.raw_message = this.compressLog(logGr.getDisplayValue("raw_message"));
			} else {
				log.raw_message = logGr.getDisplayValue("raw_message");
			}
			log.application_service = logGr.getDisplayValue("application");
			log.host = logGr.getDisplayValue("host");
			log.level = logGr.getDisplayValue("level");
			log.level = log.level.toLowerCase();
			log.component = logGr.getValue("component");
			log.id = logGr.getValue("sys_id");
			returnArray.push(log);
		}
		return returnArray;
	},
	getQueryRowCount: function (table, sysparam, startTimeInput, endTimeInput, timerangeColumn) {
		if (startTimeInput && endTimeInput) {
			var start = new GlideDateTime();
			start.subtract(start.getNumericValue());// gets the date to 0
			start.add(startTimeInput);

			var end = new GlideDateTime();
			end.subtract(end.getNumericValue());
			end.add(endTimeInput);
		}
		
		var returnArray = [];
		var tableGR = new GlideAggregate(table);
		tableGR.addEncodedQuery(sysparam);
		if (startTimeInput && endTimeInput) {
			tableGR.addEncodedQuery(timerangeColumn + 'BETWEEN' + start + '@' + end);
		}
		tableGR.addAggregate('COUNT');
		tableGR.query();
		tableGR.next();
		var obj = {};
		obj[table] = parseInt(tableGR.getAggregate('COUNT'));
		returnArray.push(obj);
		return returnArray;
	},
	queryTable: function (tableName, columns, sysparam, sortBy, sortDirection, limit, page, getAlertCount, startTimeInput, endTimeInput, timerangeColumn) {
		if (startTimeInput && endTimeInput) {
			var start = new GlideDateTime();
			start.subtract(start.getNumericValue());// gets the date to 0
			start.add(startTimeInput);

			var end = new GlideDateTime();
			end.subtract(end.getNumericValue());
			end.add(endTimeInput);
		}
		
		var returnArray = [];
		var fields = [];
		if (columns.indexOf("|") != -1) {
			fields = this.getValuesByNameMatch(columns, "|");
		} else {
			fields = this.getValuesByNameMatch(columns, ",");
		}
		if (columns.length == 0)
			fields = this.getTableColumns(tableName);
		var pageWindow = this.getPageWindow(limit, page);
		var tableGR = new GlideRecordSecure(tableName);
		tableGR.addEncodedQuery(sysparam);
		if (startTimeInput && endTimeInput) {
			tableGR.addEncodedQuery(timerangeColumn + 'BETWEEN' + start + '@' + end);
		}
		tableGR.setLimit(limit);
		tableGR.chooseWindow(pageWindow[0], pageWindow[1]);
		if (sortBy != "") {
			if (sortDirection == "ASC") {
				tableGR.orderBy(sortBy);
			} else {
				tableGR.orderByDesc(sortBy);
			}
		}
		tableGR.query();
		while (tableGR.next()) {
			var obj = {};
			for (var i = 0; i < fields.length; i++) {
				var field = fields[i];
				var fieldType = "";
				try {
					if (field.indexOf(".") == -1) {
						fieldType = tableGR.getElement(field).getED().getInternalType();
					}
				} catch (e) {}
				
				
				if (field.includes(":d")) {
					field = field.substring(0, field.length - 2);
					obj[field + ":display"] = tableGR.getDisplayValue(field);
				} else if (field.includes(":v")) {
					field = field.substring(0, field.length - 2);
					obj[field + ":value"] = tableGR.getValue(field);
				} else {
					if (fieldType == "Date/Time" || fieldType == "glide_date_time") {
						obj[field] = this.convertSysCreatedStrToMS(tableGR.getValue(field));
					} else {
						obj[field] = tableGR.getDisplayValue(field);
					}
				}
				
				if (tableName == "sn_disco_certmgmt_certificate_task" && field == "certificate_expiration_date") {
					obj["Relative Certificate Expiration"] = this.createRelativeTimeString(tableGR.getValue("certificate_expiration_date"));
					obj["Relative Certificate Expiration Days"] = parseInt(obj["Relative Certificate Expiration"]);
				}
				
				if (field == "vm_object_id") {
					obj["subscriptions"] = obj[field].substring(obj[field].indexOf("/", obj[field].indexOf("subscriptions")) + 1, obj[field].indexOf("/", obj[field].indexOf("subscriptions") + 14));
					obj["resourceGroups"] = obj[field].substring(obj[field].indexOf("/", obj[field].indexOf("resourceGroups")) + 1, obj[field].indexOf("/", obj[field].indexOf("resourceGroups") + 15));
				}
				
				if (field == "sys_created_on" || field == "sys_updated_on" || field == "last_discovered" || field == "vm_last_discovered") {
					obj["relative_" + field] = this.createRelativeTimeString(tableGR.getValue(field));
				}
			}
			if (getAlertCount) {
				obj.alertCount = 0;
				var count = JSON.parse(this.getQueryRowCount('em_alert', 'cmdb_ci=' + tableGR.getValue('cmdb_ci')));
				obj.alertCount = count[0].em_alert;
			}
			if (tableName == "em_alert") {
				//obj = this.addExtraAlertData(obj, tableGR);
			}
			returnArray.push(obj);
			//returnArray.push(this.convertRecordToJSON(tableGR, false));
		}
		
		return returnArray;
	},
	// addExtraAlertData: function(alertObj, tableGR) {
	// 	alertObj["cmdb_ci.sys_id"] = tableGR.getValue("cmdb_ci");
	// 	alertObj["incident.priority"] = tableGR.incident.priority.getDisplayValue();
	// 	alertObj["parent.sys_id"] = tableGR.getValue("parent");
		
	// 	alertObj.impacted_services_count = tableGR.getValue('sn_services');
	// 	alertObj.impacted_services = [];
	// 	if (alertObj["cmdb_ci.sys_id"]) {
	// 		var ci_assoc_gr = new GlideRecordSecure("svc_ci_assoc");
	// 		ci_assoc_gr.addQuery("ci_id", alertObj["cmdb_ci.sys_id"]);
	// 		ci_assoc_gr.query();
	// 		while (ci_assoc_gr.next()) {
	// 			alertObj.impacted_services.push(ci_assoc_gr.getDisplayValue("service_id"));
	// 		}
	// 	}
	// 	alertObj.impacted_services = JSON.stringify(alertObj.impacted_services);
	// 	alertObj.ui_action = "UI Actions";
	// 	alertObj.annotation_text = '<p>' + tableGR.getDisplayValue("description") + '<p/><a href="/d/tI7kwUKnz?var-ci=' + alertObj["cmdb_ci.sys_id"] + '" rel="noopener noreferrer" target="_blank">' + tableGR.getDisplayValue("cmdb_ci") + ' CI Details<a/>';
	// 	return alertObj;
	// },
	getAggregate: function(table, sysparam, type, column, groupBy, limit, startTimeInput, endTimeInput, timerangeColumn) {
		if (startTimeInput && endTimeInput) {
			var start = new GlideDateTime();
			start.subtract(start.getNumericValue());// gets the date to 0
			start.add(startTimeInput);

			var end = new GlideDateTime();
			end.subtract(end.getNumericValue());
			end.add(endTimeInput);
		}
		
		var returnArray = [];
		var tableGA = new GlideAggregate(table);
		tableGA.addEncodedQuery(sysparam);
		if (startTimeInput && endTimeInput && timerangeColumn) {
			tableGA.addEncodedQuery(timerangeColumn + 'BETWEEN' + start + '@' + end);
		}
		tableGA.addAggregate(type, column);
		tableGA.orderByAggregate(type, column);
		tableGA.groupBy(groupBy);
		tableGA.query();
		while (tableGA.next() && limit > 0) {
			var obj = {};
			obj[groupBy] = tableGA.getDisplayValue(groupBy);
			obj[type] = parseInt(tableGA.getAggregate(type, column));
			returnArray.push(obj);
			limit = limit - 1;
		}
		return returnArray;
	},
	getMetrics: function (ciId, startTimeInput, endTimeInput, sysparam) {
		var responseData = [];
		var startTime = new GlideDateTime();
		startTime.subtract(startTime.getNumericValue());// gets the date to 0
		startTime.add(startTimeInput);
		var endTime = new GlideDateTime();
		endTime.subtract(endTime.getNumericValue());
		endTime.add(endTimeInput);
		var cis = this.getValuesByNameMatch(ciId, "|");
		for(var c = 0; c < cis.length; c++) {
			var ciTable = "";
			var ciName = "";
			var ciGr = new GlideRecordSecure("cmdb_ci");
			ciGr.addQuery("sys_id", cis[c]);
			ciGr.query();
			if (ciGr.next()) {
				ciTable = ciGr.getValue("sys_class_name");
				ciName = ciGr.getDisplayValue("name");
			}
			//ciTable is a table with metric fields.
			var isTableAllowed = this.isTableAllowed(ciTable);
			if (isTableAllowed.allowed == false) {
				return isTableAllowed.message;
			}
			var metricTableGr = new GlideRecordSecure(ciTable);
			metricTableGr.addQuery("sys_id", cis[c]);
			if (sysparam != "")
				metricTableGr.addEncodedQuery(sysparam);
			metricTableGr.query();
			try {
				var metrics = this.getAllMetricsByCi(cis[c]);  // TODO: get from clotho instead of metric to ci table
				var builder;
				for (var i = 0; i < metrics.length; i++) {
					var metricName;
					//build a transform that returns a simple average
					builder = new sn_clotho.Transformer(metricTableGr);
					builder.metric(metrics[i]).avg().label("Average");

					//execute transform and return result for visualization
					var result = builder.execute(startTime, endTime);

                    // not all metrics have data in clotho. In that case we want to continue with other metrics 
                    // and not crash
                    if (!result || !result.getData()) {
                        gs.warn("No metric transform data for: " + metrics[i]);
                        continue;
                    }

					var values = result.getData().getValues();
					var timestamp = result.getData().getStart().getNumericValue();
					var period = result.getData().getPeriod() * 1000;
					metricName = result.getData().getMetricName();
					
					var dataSet = {};
					dataSet.source = ciName;
					dataSet.type = "";
					dataSet.metricName = metricName;
					dataSet.datapoints = [];

					for (var j = 0; j < values.length; j++) {
						var point = [values[j], timestamp];
						dataSet.datapoints.push(point);
						timestamp += period;
					}
					responseData.push(dataSet);
				}
			} catch (err) {
				gs.info(err);
			}
		}
		return responseData;
	},
	getLatestSingleMetric: function(ciIdMatch, metricIdMatch, resourceNameMatch, startTimeInput, endTimeInput, sysparam) {
		var responseData = [];
		var startTime = new GlideDateTime();
		startTime.subtract(startTime.getNumericValue());// gets the date to 0
		startTime.add(startTimeInput);
	
		var endTime = new GlideDateTime();
		endTime.subtract(endTime.getNumericValue());
		endTime.add(endTimeInput);
		var metricDataStr="";
		//store cis, resourceName, metricNames
		var ciIds = this.getValuesByNameMatch(ciIdMatch, "|");
		var metricIds = this.getValuesByNameMatch(metricIdMatch, "|");
		var resourceNames = [];
		var resourceQueryStr ="";
		if(!this.isMatchAll(resourceNameMatch))
		{
			resourceNames = this.getValuesByNameMatch(resourceNameMatch, "|");
			for(r=0;r<resourceNames.length;r++)
				resourceQueryStr+=resourceNames[r]+",";
			
			resourceQueryStr="^resource_id.nameIN"+resourceQueryStr;
			if(resourceQueryStr.charAt(resourceQueryStr.length - 1)==',')
				resourceQueryStr=resourceQueryStr.substring(0, resourceQueryStr.length - 1);

		}

		for(var c=0;c<ciIds.length;c++) {
			for(var m=0;m<metricIds.length;m++)
				{
					var strQuery='metric_type_id='+metricIds[m]+'^cmdb_ci='+ciIds[c]+resourceQueryStr;
					var resourceObjs=this.getAllResourcesFromMetricTbl(strQuery);
					
					for(var r=0;r<resourceObjs.length;r++)
					{
						var metricResponse = this.getLatestSingleMetricObject(ciIds[c], resourceObjs[r].metricName, resourceObjs[r].resourceName, startTime, endTime, sysparam);
						if (typeof metricResponse == "string") {
							return metricResponse;
						} else {
							responseData.push(metricResponse);
						}
					}
				}
		}
		
		return responseData;
	},
	getLatestSingleMetricObject: function (ciId, metric_name, resourceName, startTime, endTime, sysparam) {
		var ciGr = new GlideRecordSecure("cmdb_ci");
		//get table name
		var ciTable;
		if(resourceName!="")
		{
			ciGr = new GlideRecordSecure("ci_resource");
			ciGr.addQuery("cmdb_ci", ciId);
			ciGr.addQuery("name", resourceName);
		}
		else
		{
			ciGr.addQuery("sys_id", ciId);
		}
		ciGr.query();
		var metricResourceId = ciId;
		var ciName = ciId;
		if (ciGr.next())
		{
			ciTable = ciGr.getValue("sys_class_name");
			if(resourceName!="") {
				metricResourceId=ciGr.getValue("sys_id");
				ciName = ciGr.cmdb_ci.name.getDisplayValue();
			} else {
				ciName = ciGr.getDisplayValue("name");
			}
		}
		var isTableAllowed = this.isTableAllowed(ciTable);
		if (isTableAllowed.allowed == false) {
			return isTableAllowed.message;
		}
		var metricTableGr = new GlideRecordSecure(ciTable);
		metricTableGr.addQuery("sys_id", metricResourceId);
		if (sysparam!="") {
			metricTableGr.addEncodedQuery(sysparam);	
		}
		metricTableGr.query();
		try {
			//build a transform that returns a simple average
			var builder = new sn_clotho.Transformer(metricTableGr);
			builder.metric(metric_name).avg().label("Average");

			//execute transform and return result for visualization
			var result = builder.execute(startTime, endTime);

			var values = result.getData().getValues();
			var timestamp = result.getData().getStart().getNumericValue();
			var period = result.getData().getPeriod() * 1000;
			var metricName = result.getData().getMetricName();
			
			var dataSet = {};
			dataSet.source = ciName;
			dataSet.type = resourceName;
			dataSet.metricName = metricName;
			dataSet.length = 1;
			dataSet.values = [values[values.length - 1]];
			dataSet.datapoints = [[values[values.length - 1], timestamp + values.length * period]];
			return dataSet;
		} catch(err) {
			return {error: err};
		}
	},
	getSingleMetric: function(ciIdMatch, metricIdMatch, resourceNameMatch,startTimeInput,endTimeInput,sysparam) {
		var responseData = [];
		var startTime = new GlideDateTime();
		startTime.subtract(startTime.getNumericValue());// gets the date to 0
		startTime.add(startTimeInput);
	
		var endTime = new GlideDateTime();
		endTime.subtract(endTime.getNumericValue());
		endTime.add(endTimeInput);
		var metricDataStr="";
		//store cis, resourceName, metricNames
		var ciIds = this.getValuesByNameMatch(ciIdMatch, "|");
		var metricIds = this.getValuesByNameMatch(metricIdMatch, "|");
		var resourceNames = [];
		var resourceQueryStr ="";
		if(!this.isMatchAll(resourceNameMatch))
		{
			resourceNames = this.getValuesByNameMatch(resourceNameMatch, "|");
			for(r=0;r<resourceNames.length;r++)
				resourceQueryStr+=resourceNames[r]+",";
			
			resourceQueryStr="^resource_id.nameIN"+resourceQueryStr;
			if(resourceQueryStr.charAt(resourceQueryStr.length - 1)==',')
				resourceQueryStr=resourceQueryStr.substring(0, resourceQueryStr.length - 1);

		}

		for(var c=0;c<ciIds.length;c++) {
			for(var m=0;m<metricIds.length;m++)
				{
					var strQuery='metric_type_id='+metricIds[m]+'^cmdb_ci='+ciIds[c]+resourceQueryStr;
					var resourceObjs=this.getAllResourcesFromMetricTbl(strQuery);
					
					for(var r=0;r<resourceObjs.length;r++)
					{
						var metricResponse = this.getSingleMetricObject(ciIds[c], resourceObjs[r].metricName, resourceObjs[r].resourceName, startTime, endTime, sysparam);
						if (typeof metricResponse == "string") {
							return metricResponse;
						} else {
							responseData.push(metricResponse);
						}
					}
				}
		}
		return responseData;
	},
	getSingleMetricObject: function (ciId, metric_name, resourceName, startTime, endTime, sysparam) {
		var ciGr = new GlideRecordSecure("cmdb_ci");
		//get table name
		var ciTable;
		if(resourceName!="")
		{
			ciGr = new GlideRecordSecure("ci_resource");
			ciGr.addQuery("cmdb_ci", ciId);
			ciGr.addQuery("name", resourceName);
		}
		else
		{
			ciGr.addQuery("sys_id", ciId);
		}
		ciGr.query();
		var metricResourceId = ciId;
		var ciName = ciId;
		if (ciGr.next())
		{
			ciTable = ciGr.getValue("sys_class_name");
			if(resourceName!="") {
				metricResourceId=ciGr.getValue("sys_id");
				ciName = ciGr.cmdb_ci.name.getDisplayValue();
			} else {
				ciName = ciGr.getDisplayValue("name");
			}
		}
		var isTableAllowed = this.isTableAllowed(ciTable);
		if (isTableAllowed.allowed == false) {
			return isTableAllowed.message;
		}
		var metricTableGr = new GlideRecordSecure(ciTable);
		metricTableGr.addQuery("sys_id", metricResourceId);
		if (sysparam!="") {
			metricTableGr.addEncodedQuery(sysparam);	
		}
		metricTableGr.query();
		try {
			//build a transform that returns a simple average
			var builder = new sn_clotho.Transformer(metricTableGr);
			builder.metric(metric_name).avg().label("Average");

			//execute transform and return result for visualization
			var result = builder.execute(startTime, endTime);

			var values = result.getData().getValues();
			var timestamp = result.getData().getStart().getNumericValue();
			var period = result.getData().getPeriod() * 1000;
			var metricName = result.getData().getMetricName();
			
			var dataSet = {};
			dataSet.source = ciName;
			dataSet.type = resourceName;
			dataSet.metricName = metricName;
			dataSet.length = values.length;
			dataSet.values = values;
			dataSet.datapoints = [];
			
			//dataSet.datapoints.push([0, this.convertSysCreatedStrToMS(startTime)]);
			
			for (var j = 0; j < values.length; j++) {
				var point = [values[j], timestamp];
				dataSet.datapoints.push(point);
				timestamp += period;
			}
			return dataSet;
		} catch(err) {
			return {error: err};
		}
	},
	getAnomalyMetrics: function (ciId, metricId, startTimeInput, endTimeInput) {
		try {
			var returnValues = [];
			var startTime = new GlideDateTime();
			startTime.subtract(startTime.getNumericValue());// gets the date to 0
			startTime.add(startTimeInput);
			var endTime = new GlideDateTime();
			endTime.subtract(endTime.getNumericValue());
			endTime.add(endTimeInput);
			var ciIds = this.getValuesByNameMatch(ciId, "|");
			var chosen_metrics = "";
			if (metricId != "*") {
				chosen_metrics = this.getValuesByNameMatch(metricId, "|");
			}
			for(var c=0;c<ciIds.length;c++) {
				var metricIds = this.getMetricIdsByCi(ciIds[c],chosen_metrics);
				for(var m = 0; m < metricIds.length; m++) {
					var metricDataObj = this.queryAnomalyMetric(
						ciIds[c],
						metricIds[m].metricName,
						startTime,
						endTime
					);
					if (typeof metricDataObj == "string") {
						return metricDataObj;
					}
					var obj = {};
					obj.ci_name = metricIds[m].ciName;
					obj.metric_name = metricIds[m].metricName;
					obj.data = metricDataObj;
					returnValues.push(obj);
				}
			}

			return returnValues;
		} catch (e) {
			return e;
		}
	},
	queryAnomalyMetric: function (ci_id, metric_name, start_time, end_time) {
		var ciGr = new GlideRecordSecure("cmdb_ci");
		var ci_table = "";
		ciGr.addQuery("sys_id", ci_id);
		ciGr.query();
		if (ciGr.next()) {
			ci_table = ciGr.getValue("sys_class_name");
		}
		var isTableAllowed = this.isTableAllowed(ci_table);
		if (isTableAllowed.allowed === false) {
			return isTableAllowed.message;
		}
		var metricTableGr = new GlideRecordSecure(ci_table);
		metricTableGr.addQuery("sys_id", ci_id);
		metricTableGr.query();
		var dataSet = {};
		
		try {
			//build a transform that returns a simple average
			var builder = new sn_clotho.Transformer(metricTableGr);
			builder.metric(metric_name).avg().label("AVG");
			builder.metric(metric_name).max().label("MAX");
			builder.metric(metric_name).min().label("MIN");

			//execute transform and return result for visualization
			var result = builder.execute(start_time, end_time);
			
			var avgData = result.getByLabel("AVG");
			var maxData = result.getByLabel("MAX");
			var minData = result.getByLabel("MIN");
			
			if (!avgData || !maxData || !minData) {
				dataSet.length = 0;
				dataSet.series = [
					{
						type: "AVG",
						data: []
					},
					{
						type: "MAX",
						data: []
					},
					{
						type: "MIN",
						data: []
					}
				];
				/*var intervalInSeconds = 60;
				var timeDifference = GlideDateTime.subtract(start_time, end_time);
				if (timeDifference.getDisplayValue().contains("Days")) {
					intervalInSeconds = 60 * 60;
				}
				while (start_time <= end_time) {
					dataSet.series[0].data.push({time: this.convertSysCreatedStrToMS(start_time), value: 0});
					dataSet.series[1].data.push({time: this.convertSysCreatedStrToMS(start_time), value: 0});
					dataSet.series[2].data.push({time: this.convertSysCreatedStrToMS(start_time), value: 0});
					start_time.addSeconds(intervalInSeconds);
				}*/
				return dataSet;
			}
			
			var timestamp = avgData.getStart().getNumericValue();
			var period = avgData.getPeriod() * 1000;
			
			var avgValues = avgData.getValues();
			var maxValues = maxData.getValues();
			var minValues = minData.getValues();
			
			dataSet.length = avgValues.length;
			dataSet.series = [
				{
					type: "AVG",
					data: []
				},
				{
					type: "MAX",
					data: []
				},
				{
					type: "MIN",
					data: []
				}
			];
			
			for (var j = 0; j < dataSet.length; j++) {
				var avgDataPoint = {time: timestamp, value: avgValues[j]};
				var maxDataPoint = {time: timestamp, value: maxValues[j]};
				var minDataPoint = {time: timestamp, value: minValues[j]};
				
				dataSet.series[0].data.push(avgDataPoint);
				dataSet.series[1].data.push(maxDataPoint);
				dataSet.series[2].data.push(minDataPoint);
				
				timestamp += period;
			}
			
		} catch(err) {
			return {error: err};
		}
		return dataSet;
	},
	getAlerts: function(ciId, alertType, alertState, sysparam, limit, page, sortBy, sortDirection, startTime, endTime, timerangeColumn, tagFilters) {
		var alertStateFilter="stateINOpen,Reopen";
		if (alertState == "All")
			alertStateFilter="";
		var sysparam_query="";
		if (sysparam != "")
			sysparam_query = sysparam;
		var cis =[];
		if(alertType=="service") {
			var isTableAllowed = this.isTableAllowed("em_impact_graph");
			if (isTableAllowed.allowed == false) {
				return isTableAllowed.message;
			}
			cis = this.getAllCIsInService(ciId);
		} else if (alertType=="ci") {
			cis = this.getValuesByNameMatch(ciId, "|");
		} else if (alertType=="none") {
			cis=[];
		}
		
		var tagSysparam = "";
		if (tagFilters != "") {
			tagSysparam = this.createTagSysparam(tagFilters, 'additional_info');
		}
		
		var responseData=this.getAlertsByCI(cis,alertStateFilter,sysparam_query, limit, page, sortBy, sortDirection, startTime, endTime, timerangeColumn, tagSysparam);

		return responseData;
	},
	getAlertsByCI: function (ciIds, filter, query, limit, page, sortBy, sortDirection, startTime, endTime, timerangeColumn, tagSysparam) {
		if (startTime && endTime) {
			var start = new GlideDateTime();
			start.subtract(start.getNumericValue());// gets the date to 0
			start.add(startTime);

			var end = new GlideDateTime();
			end.subtract(end.getNumericValue());
			end.add(endTime);
		}

		var sysparam_query;
		if (query != "")
			sysparam_query=query;
		var pageWindow = this.getPageWindow(limit, page);
		var alertGr = new GlideRecordSecure('em_alert');
		if (filter != "") {
			alertGr.addEncodedQuery(filter);
		}
		if (sysparam_query) {
			alertGr.addEncodedQuery(sysparam_query);
		}
		if (tagSysparam != "") {
			alertGr.addEncodedQuery(tagSysparam);
		}
		if (ciIds.length > 0) {
			alertGr.addQuery("cmdb_ci","IN", ciIds.toString());
		}
		if (startTime && endTime) {
			alertGr.addEncodedQuery(timerangeColumn + 'BETWEEN' + start + '@' + end);
		}
		alertGr.setLimit(limit);
		alertGr.chooseWindow(pageWindow[0], pageWindow[1]);
		if (sortBy != "") {
			if (sortDirection == "ASC") {
				alertGr.orderBy(sortBy);
			} else {
				alertGr.orderByDesc(sortBy);
			}
		}
		alertGr.query();
		var responseData = [];
		
		while (alertGr.next())
        {	
			var alert = new Object();
			alert.updated_relative_time = this.createRelativeTimeString(alertGr.getValue("sys_updated_on"));
			alert.created_relative_time = this.createRelativeTimeString(alertGr.getValue("sys_created_on"));
			alert.sys_created_on = this.convertSysCreatedStrToMS(alertGr.getValue("sys_created_on"));
			
			alert.AlertId=alertGr.getValue("number");
			alert.Incident=alertGr.getDisplayValue("incident");
			alert.IncidentSysID=alertGr.getValue("incident");
			alert.incidentPriority = parseInt(alertGr.incident.priority.toString());
			alert.Group=alertGr.getDisplayValue("group_source");
			alert.Severity  = alertGr.getDisplayValue("severity");
			alert.Priortity =alertGr.getDisplayValue("sn_priority_group");
			alert.State  = alertGr.getDisplayValue("state");
			alert.Acknowledged =alertGr.getDisplayValue("acknowledged");
			alert.Summary=alertGr.getDisplayValue("message_key");
			alert.CI=alertGr.getDisplayValue("cmdb_ci");
			alert.CIClass = alertGr.cmdb_ci.sys_class_name.getDisplayValue();
			alert.CISysID = alertGr.getValue("cmdb_ci");
			alert.MetricName=alertGr.getDisplayValue("metric_name");
			alert.Resource=alertGr.getDisplayValue("resource");
			alert.Source=alertGr.getDisplayValue("source");
			alert.Maintenance=alertGr.getDisplayValue("maintenance");
			alert.Description=alertGr.getValue("description");
			alert.EventCount=parseInt(alertGr.getValue("event_count"));
			alert.IsGroup=alertGr.getDisplayValue("is_group_alert");
			alert.SeverityNum  = parseInt(alertGr.getValue("severity"));
			alert.PriortityNum =parseInt(alertGr.getValue("sn_priority_group"));
			alert.Updated = this.convertSysCreatedStrToMS(alertGr.getValue("sys_updated_on"));
			alert.last_event_time = this.convertSysCreatedStrToMS(alertGr.getValue("last_event_time"));
			alert.sys_id=alertGr.getValue("sys_id");
			alert.additional_info=alertGr.getValue("additional_info");
			alert.type = alertGr.getDisplayValue('type');
			alert.uiAction = "UI Actions";
			alert.annotationText = '<p>' + alert.Description + '<p/><a href="/d/tI7kwUKnz?var-ci=' + alert.CISysID + '" rel="noopener noreferrer" target="_blank">' + alert.CI + ' CI Details<a/>';
			
			try {
				var additional_info_json = JSON.parse(alert.additional_info);
				alert.anomaly_count = parseInt(additional_info_json.sn_anomaly_current);
			} catch (e) {}
			alert.node = alertGr.getDisplayValue("node");
			alert.start_time = this.convertSysCreatedStrToMS(alertGr.getValue("sys_created_on"));
			
			alert.secondary_alerts = 0;
			alert.secondary_distinct_sources = 0;
			if (alert.Group != "Secondary" && alert.Group != "") {
				alert.drilldownSysID = alert.sys_id;
				var secondaryGr = new GlideAggregate("em_alert");
				secondaryGr.addQuery("parent", alert.sys_id);
				secondaryGr.addAggregate("COUNT", "sys_id");
				secondaryGr.groupBy("parent");
				secondaryGr.query();
				if (secondaryGr.next()) {
					alert.secondary_alerts = parseInt(secondaryGr.getAggregate("COUNT", "sys_id"));
				}
				
				var distinctSourceGr = new GlideAggregate("em_alert");
				distinctSourceGr.addQuery("parent", alert.sys_id);
				distinctSourceGr.addAggregate("COUNT", "sys_id");
				distinctSourceGr.groupBy("source");
				distinctSourceGr.query();
				while (distinctSourceGr.next()) {
					alert.secondary_distinct_sources += 1;
				}
			} else {
				alert.drilldownSysID = alertGr.getValue("parent");
			}
			
			alert.impactedServicesCount = alertGr.getValue('sn_services');
			alert.impactedServices = "";

			// Check if Event Management Plugin is installed
			var pluginMgr = new GlidePluginManager();
			var evtMgmtScriptIncludeExists = pluginMgr.isActive("com.glideapp.itom.snac");
			
			if (alert.impactedServicesCount > 0 && evtMgmtScriptIncludeExists == true) {
				var impactedSysIDs = new global.EvtMgmtAlertsInGroupAPI().getImpactedServicesForAlert(alert.sys_id);
				var endSubstring = this.findNthIndex(impactedSysIDs, ",", 3);
				if (endSubstring == -1) {
					endSubstring = impactedSysIDs.length;
				}
				var impactedServiceSysIDs = impactedSysIDs.substring(0, endSubstring);

				var isTableAllowed = this.isTableAllowed("cmdb_ci_service");
				if (isTableAllowed.allowed == false) {
					return isTableAllowed.message;
				}

				var serviceGr = new GlideRecordSecure("cmdb_ci_service");
				serviceGr.addEncodedQuery("sys_idIN" + impactedServiceSysIDs);
				serviceGr.orderBy("name");
				serviceGr.setLimit(3);
				serviceGr.query();
				while (serviceGr.next()) {
					alert.impactedServices += serviceGr.getDisplayValue("name") + ",";
				}
				if (alert.impactedServices.charAt(alert.impactedServices.length - 1) == ",")
					alert.impactedServices = alert.impactedServices.substring(0, alert.impactedServices.length - 1);
			}
			responseData.push(alert);
		}
		
		return responseData;
	},
	getAllMetrics: function (sysparam) {
		var gr = new GlideRecordSecure('sa_metric_map');
		var returnStr="";
		if(sysparam.length>0)
			gr.addEncodedQuery(sysparam);
		gr.query();
		while (gr.next())
		{	
			var obj = new Object();
			obj.sys_created_on=gr.getValue("sys_created_on");
			obj.metric_type_id= gr.getDisplayValue("metric_type_id");
			obj.metric_tiny_name= gr.metric_type_id.metric_type_tiny_name.toString();
			obj.ci = gr.getDisplayValue("cmdb_ci");
			obj.resource_id = gr.getDisplayValue("resource_id");
			obj.resource = gr.getDisplayValue("resource");
			obj.source= gr.getDisplayValue("source");
			var jsonString= JSON.stringify(obj);
			returnStr+=jsonString;
			returnStr+=",";

		}
		if (returnStr.charAt(returnStr.length - 1) == ",")
			returnStr=returnStr.substring(0, returnStr.length - 1);

		return '['+returnStr+"]";
	},
	queryGeohashMap: function (table, regionColumn, sysparam) {
		var aggArray = this.getAggregate(table, sysparam, 'COUNT', 'vm_sys_id', regionColumn, 9999);
		for(var i = 0; i < aggArray.length; i++) {
			aggArray[i].geohash = this.getGeohash(aggArray[i][regionColumn]);
		}
		return aggArray;
	},
	getGeohash: function (regionName) {
		var geohash = regionName;
		switch (regionName) {
			case 'us-east-1':
				geohash = 'dqcjqfz6yf38d';
				break;
			case 'us-east-2':
				geohash = 'dphgr6dnezjs4';
				break;
			case 'us-west-1':
				geohash = '9q8yyk8yuv5kd';
				break;
			case 'us-west-2':
				geohash = 'c20fbrjxncc43';
				break;
			case 'af-south-1':
				geohash = 'k3vp50pvrd51u';
				break;
			case 'ap-east-1':
				geohash = 'wecpkt5uxuzby';
				break;
			case 'ap-south-1':
				geohash = 'te7ud2evsmnuy';
				break;
			case 'ap-northeast-3':
				geohash = 'xn0m77v9tm927';
				break;
			case 'ap-northeast-2':
				geohash = 'wydm9qy8cjsnh';
				break;
			case 'ap-southeast-1':
				geohash = 'w21zdqpk3w897';
				break;
			case 'ap-southeast-2':
				geohash = 'r3gx2f75zfr55';
				break;
			case 'ap-northeast-1':
				geohash = 'xn774c06kdtd9';
				break;
			case 'ca-central-1':
				geohash = 'f25dvgmfw9w52';
				break;
			case 'eu-central-1':
				geohash = 'u0yjjd6jk0zj7';
				break;
			case 'eu-west-1':
				geohash = 'gc7x9813hhqwb';
				break;
			case 'eu-west-2':
				geohash = 'gcpvj0dup40sx';
				break;
			case 'eu-south-1':
				geohash = 'u0nd9hebnjghx';
				break;
			case 'eu-west-3':
				geohash = 'u09tvw0f6szye';
				break;
			case 'eu-north-1':
				geohash = 'u6sce0t4k7qt0';
				break;
			case 'me-south-1':
				geohash = 'thevpng8hmub2';
				break;
			case 'sa-east-1':
				geohash = '6gyf4bf8m0us1';
				break;
			case 'australiacentral':
				geohash = 'r3dp3931thdm5';
				break;
			case 'australiacentral2':
				geohash = 'r3dp3931thdm5';
				break;
			case 'australiaeast':
				geohash = 'r3gx2f75zfr55';
				break;
			case 'australiasoutheast':
				geohash = 'r1r0fsnzshf6z';
				break;
			case 'brazilsouth':
				geohash = '6gyf4bf8m0us1';
				break;
			case 'brazilsoutheast':
				geohash = '75cm9tfmyw5rp';
				break;
			case 'canadacentral':
				geohash = 'dpz83dffmxpu1';
				break;
			case 'canadaeast':
				geohash = 'f2m66b68fs1h';
				break;
			case 'centralindia':
				geohash = 'tek92esc6f7u7';
				break;
			case 'centralus':
				geohash = '9zqvj0jv8t0h9';
				break;
			case 'eastasia':
				geohash = 'wecpkt5uxuzby';
				break;
			case 'eastus':
				geohash = 'dqcjqfz6yf38d';
				break;
			case 'eastus2':
				geohash = 'dq8vtfhf963e7';
				break;
			case 'francecentral':
				geohash = 'u09tvw0f6szye';
				break;
			case 'francesouth':
				geohash = 'spey61yhkcnpm';
				break;
			case 'germanynorth':
				geohash = 'u33dc0cpnnfjj';
				break;
			case 'germanywestcentral':
				geohash = 'u0yjjd6jk0zj7';
				break;
			case 'japaneast':
				geohash = 'xn77cz94nj149';
				break;
			case 'japanwest':
				geohash = 'xn0m77v9tm927';
				break;
// 			case 'jioindiawest':
// 				geohash = '';
// 				break;
			case 'koreacentral':
				geohash = 'wydm9qy8cjsnh';
				break;
			case 'koreasouth':
				geohash = 'wy7b1hnpb2nmz';
				break;
			case 'northcentralus':
				geohash = 'dp3wjztvtwq8w';
				break;
			case 'northeurope':
				geohash = 'gc7x9813hhqwb';
				break;
			case 'norwayeast':
				geohash = 'u4xsudvx96wvz';
				break;
			case 'norwaywest':
				geohash = 'u4ez91gksg7h4';
				break;
			case 'southafricanorth':
				geohash = 'ke7fyjxqj94kv';
				break;
			case 'southafricawest':
				geohash = 'k3vp50pvrd51u';
				break;
			case 'southcentralus':
				geohash = '9vhx0mjvqc9yv';
				break;
			case 'southindia':
				geohash = 'tf346tek5k3d0';
				break;
			case 'southeastasia':
				geohash = 'w21zdqpk3w897';
				break;
			case 'switzerlandnorth':
				geohash = 'u0qjd2ey7guej';
				break;
			case 'switzerlandwest':
				geohash = '	u0hqgg321fy85';
				break;
			case 'uaecentral':
				geohash = 'thqej7sq5yqkp';
				break;
			case 'uaenorth':
				geohash = 'thrr3squys6uu';
				break;
			case 'uksouth':
				geohash = 'gcpvj0dup40sx';
				break;
			case 'ukwest':
				geohash = 'gcjszevjcy68t';
				break;
			case 'westcentralus':
				geohash = '9xm6nc21z0r9u';
				break;
			case 'westeurope':
				geohash = 'u173zmsw9evff';
				break;
			case 'westindia':
				geohash = 'te7ud2evsmnuy';
				break;
			case 'westus':
				geohash = '9q8yyk8yuvhh';
				break;
			case 'westus2':
				geohash = 'c23nb62w20s6r';
				break;
			case 'westus3':
				geohash = '9tbq39n4vtmh9';
				break;
			default:
				break;
		}
		return geohash;
	},
	
	// Helper Methods
	getPageWindow: function (limit, page) {
		var pageWindow = [];
		if (page == 0) {
			pageWindow.push(0);
			pageWindow.push(limit);
		} else {
			pageWindow.push(limit * page);
			pageWindow.push(limit * (page + 1));
		}
		return pageWindow;
	},
	getTableColumns: function (table) {
		var tablesToCheck = [table];
		var extendedTableGr = new GlideRecordSecure("sys_db_object");
		extendedTableGr.addQuery("name", table);
		extendedTableGr.query();
		if (extendedTableGr.next()) {
			tablesToCheck.push(extendedTableGr.super_class.name.toString());
		}
		var returnArray = [];
		var columnGr = new GlideRecordSecure("sys_dictionary");
		columnGr.addEncodedQuery("nameIN" + tablesToCheck.toString());
		columnGr.addEncodedQuery("element!=NULL");
		columnGr.query();
		while (columnGr.next()) {
			var columnName = columnGr.getDisplayValue("element");
			returnArray.push(columnName);
		}
		return returnArray;
	},
	isCustomKpi: function (metricName, operatingSystems) {
		var returnValue = false;
		if (operatingSystems.contains("cmdb_ci_linux_server")) {
			switch (metricName) {
				case "cpu_system_percentage":
					returnValue = true;
					break;
				case "load_avg_five":
					returnValue = true;
					break;
				case "memory_percent_available":
					returnValue = true;
					break;
				default:
					returnValue = false;
					break;
			}
		}
		if (operatingSystems.contains("cmdb_ci_win_server")) {
			switch (metricName) {
				case "cpu_loadavgsec":
					returnValue = true;
					break;
				case "cpu_queuelength":
					returnValue = true;
					break;
				case "ram_usage_percentage":
					returnValue = true;
					break;
				default:
					returnValue = false;
					break;
			}
		}
		return returnValue;
	},
	isGoldenMetric: function (metricName) {
		var gr = new GlideRecordSecure('sa_metric_dashboard_metadata');
		gr.query();

		while (gr.next()) {
			if(gr.source_metrics_types.getDisplayValue().contains(metricName))
				return true;
		}
		return false;
	},
	getCINameByID: function (sys_id) {
		var name = "";
		var nameGr = new GlideRecordSecure("cmdb_ci");
		nameGr.addQuery("sys_id", sys_id);
		nameGr.query();
		if (nameGr.next()) {
			name = nameGr.getDisplayValue("name");
		}
		return name;
	},
	getOutageByCI: function (ci, name, showPercent) {
		var hundredPercentUptime = 7776000;
		var actualUptime = hundredPercentUptime;
		var outages = {};
		outages.ci = name;
		outages.datapoints = [];
		for (var i = 89; i >= 0; i--) {
			var date = new GlideDateTime(gs.daysAgo(i));
			var outageGr = new GlideRecordSecure("cmdb_ci_outage");
			outageGr.addQuery("cmdb_ci", ci);
			outageGr.addQuery("end", ">=", gs.daysAgoStart(i)).addOrCondition("end", "=", "NULL");
			outageGr.addQuery("begin", "<=", gs.daysAgoEnd(i));
			outageGr.query();

			if (outageGr.hasNext()) {
				while (outageGr.next()) {
					var begin = new GlideDateTime(outageGr.getValue("begin"));
					var end = new GlideDateTime(outageGr.getValue("end"));
					var type = outageGr.getDisplayValue("type");
					
					if (begin) {
						outages.datapoints.push([type, begin.getNumericValue()]);
						if (end) {
							outages.datapoints.push(["Operational", end.getNumericValue()]);
						} else {
							outages.datapoints.push([type, date.getNumericValue()]);
						}
							
					}
					
					if (begin && end)
						actualUptime -= (end.getNumericValue()*0.001) - (begin.getNumericValue()*0.001);
				}
			} else {
				outages.datapoints.push(["Operational", date.getNumericValue()]);
			}
		}
		if (showPercent)
			outages.uptimePercentage = actualUptime / hundredPercentUptime;
		return outages;
	},
	encodeBase16: function (search) {
		var string = unescape(encodeURIComponent(search));
		var hex16 = '';
		for (var i = 0; i < string.length; i++) {
			hex16 += string.charCodeAt(i).toString(16);
		}
		return hex16;
	},
	compressLog: function (raw_message) {
		if (raw_message == "") {
			return raw_message;
		}
		var jsonMessage = JSON.parse(raw_message);
		var returnMessage = {};
		returnMessage.message = jsonMessage.message;
		if (jsonMessage.fields) {
			returnMessage['sn-sourcetype'] = jsonMessage.fields['sn-sourcetype'];
			returnMessage['sn-service'] = jsonMessage.fields['sn-service'];
			returnMessage['sn-application'] = jsonMessage.fields['sn-application'];
			returnMessage['sn-ciname'] = jsonMessage.fields['sn-ciname'];
		}
		returnMessage['agent-hostname'] = jsonMessage.agent.hostname;
		return JSON.stringify(returnMessage);
	},
	flatten: function (oldObject) {
		var newObject = {};

		this.flattenHelper(oldObject, newObject, '');

		return newObject;
	},
	flattenHelper: function (currentObject, newObject, previousKeyName) {
		for (var key in currentObject) {
			var value = currentObject[key];

			if (value.constructor !== Object) {
				if (previousKeyName == null || previousKeyName == '') {
					newObject[key] = value;
				} else {
					if (key == null || key == '') {
						newObject[previousKeyName] = '"' + value + '"';
					} else {
						newObject[previousKeyName + '_' + key] = '"' + value + '"';
					}
				}
			} else {
				if (previousKeyName == null || previousKeyName == '') {
					this.flattenHelper(value, newObject, key);
				} else {
					this.flattenHelper(value, newObject, previousKeyName + '_' + key);
				}
			}
		}
	},
	getAllCIsInService: function (serviceId) {
		var cis = [];
		var isTableAllowed
        var childrenCIs = new GlideRecordSecure("em_impact_graph");
		childrenCIs.addQuery("business_service", serviceId);
		childrenCIs.query();
        while (childrenCIs.next())
        {
			var name = childrenCIs.getDisplayValue("child_name");
			var id = childrenCIs.getValue("child_id");
			if (name != "" && cis.indexOf(id) == -1) {
				cis.push(id);
			}
        }
        return cis;
	},
	getAllResourcesFromMetricTbl: function (strQuery) {
		var resources = [];
		
		var metricToCiGr = new GlideRecordSecure('sa_metric_map');
		metricToCiGr.addEncodedQuery(strQuery);
		metricToCiGr.query();

		while (metricToCiGr.next()) {
			var resource = {};
			resource.resourceName= metricToCiGr.getDisplayValue("resource_id");
			resource.metricName = metricToCiGr.metric_type_id.metric_type_tiny_name.toString();
			resources.push(resource);
		}
		
		return resources;
	},
	getAllMetricsByCi: function (ciId) {
		var metrics = [];
		var metricToCiGr = new GlideRecordSecure('sa_metric_map');
		metricToCiGr.addQuery("cmdb_ci", ciId);
		metricToCiGr.addNullQuery("resource_id");
		metricToCiGr.query();
		while (metricToCiGr.next()) {
			var metric = metricToCiGr.metric_type_id.metric_type_tiny_name.toString();
			metrics.push(metric);
		}
		return metrics;
	},
	getMetricIdsByCi: function (ciId,chosen_metrics) {
		var metrics = [];
		var metricToCiGr = new GlideRecordSecure('sa_metric_map');
		metricToCiGr.addQuery("cmdb_ci", ciId);
		if (chosen_metrics != "") {
			metricToCiGr.addEncodedQuery("metric_type_idIN" + chosen_metrics);
		}
		metricToCiGr.addNullQuery("resource_id");
		metricToCiGr.query();
		while (metricToCiGr.next()) {
			var obj = {};
			obj.metricId = metricToCiGr.getValue("metric_type_id");
			obj.metricName = metricToCiGr.metric_type_id.metric_type_tiny_name.toString();
			obj.ciId = metricToCiGr.getValue("cmdb_ci");
			obj.ciName = metricToCiGr.getDisplayValue("cmdb_ci");
			metrics.push(obj);
		}
		return metrics;
	},
	convertSysCreatedStrToMS: function (timeStr) {
		var gdt = new GlideDateTime();
		gdt.setValue(timeStr);
		return gdt.getNumericValue();
	},
	isRegEx: function(str) {
		if((str.charAt(0)=='/') && (str.charAt(str.length-1)=='/'))
			return true;

		return false;
	},
	getValuesByNameMatch: function (matchStr,seperator) {
		var values = [];
		if(this.isRegEx(matchStr)) {
			matchStr=matchStr.substring(1, matchStr.length - 1);
			if (matchStr.charAt(0) == "(")
				matchStr = matchStr.substring(1, matchStr.length - 1);
		}
			
		values = matchStr.split(seperator);
		return values;
	},
	isMatchAll: function (input) {
		if(input=='*'  || input=='\*' || input=='\.*\\')
			return true;

		return false;
	},
	findNthIndex: function (string, match, n) {
		var L = string.length, i = -1;
		while(n-- && i++ < L){
			i = string.indexOf(match, i);
			if (i < 0) break;
		}
		return i;
	},
	convertRecordToJSON: function (gr, stringify) {
		var fields = new GlideRecordUtil().getFields(gr);
		fields.sort();
		
		var recordObj = {};
			
		for(var field in fields) {
			var type = gr.getElement(fields[field]).getED().getInternalType();

			recordObj[fields[field] + ":" + "display:" + type] = gr.getDisplayValue(fields[field]);
			recordObj[fields[field] + ":" + "value:" + type] = gr.getValue(fields[field]);
			/*if(type == 'boolean' || type == 'journal_input'){
				recordObj[fields[field]] = gr.getDisplayValue(fields[field]);
			} else {
				recordObj[fields[field]] = gr.getValue(fields[field]);
			}*/
		}
		return stringify == true ? JSON.stringify(recordObj) : recordObj;
	},
	createTagSysparam: function (tagString, field) {
		var returnString = "";
		var tagArray = tagString.split(",");
		for (var t = 0; t < tagArray.length; t++) {
			var tag = tagArray[t].split("=");
			var key = tag[0];
			var value = tag[1];
			var seperator = '^OR';
			returnString += seperator + field + 'LIKE"' + key + '": "' + value + '"';
		}
		returnString = returnString.substring(3);
		gs.info("tagSysparam: " + returnString, "itomgrafanabackend");
		return returnString;
	},
	shortenRelativeTime: function (rel_time) {
		rel_time = rel_time.replace("Days", "d");
		rel_time = rel_time.replace("Day", "d");
		rel_time = rel_time.replace("Hours", "hr");
		rel_time = rel_time.replace("Hour", "hr");
		rel_time = rel_time.replace("Minutes", "min");
		rel_time = rel_time.replace("Minute", "min");
		rel_time = rel_time.replace("Seconds", "sec");
		rel_time = rel_time.replace("Second", "sec");
		return rel_time;
	},
	createRelativeTimeString: function (time_value) {
		var relative_time = "";
		if (time_value) {
			var currentTime = new GlideDateTime();
			var dateTime = new GlideDateTime(time_value);
			var difference = new GlideDuration();
			var suffix = "";
			if (dateTime < currentTime) {
				difference = GlideDateTime.subtract(dateTime, currentTime);
				suffix = " ago";
			} else {
				difference = GlideDateTime.subtract(currentTime, dateTime);
			}
			relative_time = this.shortenRelativeTime(difference.getDisplayValue() + suffix);
		}
		return relative_time;
	},
	getImpactStatusOfCI: function (sys_id) {
		var returnImpact = 0;
		if (sys_id) {
			var impactGr = new GlideRecordSecure("em_impact_status");
			impactGr.addQuery("element_id", sys_id);
			impactGr.addEncodedQuery("vt_end>javascript:gs.endOfCurrentMinute()");
			impactGr.query();
			if (impactGr.next()) {
				returnImpact = parseInt(impactGr.getValue("severity"));
			}
		}
		return returnImpact;
	},

    type: 'GrafanaAPIBackend'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>bstill-routley</sys_created_by>
        <sys_created_on>2022-01-05 19:30:47</sys_created_on>
        <sys_id>2bf5387a1bf08990ba4d15c61a4bcb53</sys_id>
        <sys_mod_count>183</sys_mod_count>
        <sys_name>GrafanaAPIBackend</sys_name>
        <sys_package display_value="ITOM Grafana Plugin" source="x_opti8_itom_grafa">c9d5fc3a1bf08990ba4d15c61a4bcb03</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ITOM Grafana Plugin">c9d5fc3a1bf08990ba4d15c61a4bcb03</sys_scope>
        <sys_update_name>sys_script_include_2bf5387a1bf08990ba4d15c61a4bcb53</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-24 18:30:42</sys_updated_on>
    </sys_script_include>
</record_update>
